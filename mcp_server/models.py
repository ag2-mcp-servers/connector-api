# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:41:32+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, RootModel


class Type(Enum):
    platform = 'platform'
    unified = 'unified'


class ApiStatus(Enum):
    live = 'live'
    beta = 'beta'
    development = 'development'
    considering = 'considering'


class ApisFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    status: Optional[ApiStatus] = None


class BadRequestResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Bad Request'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid Params'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#requestvalidationerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[400]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['RequestValidationError'],
    )


class AuthType(Enum):
    oauth2 = 'oauth2'
    apiKey = 'apiKey'
    basic = 'basic'
    custom = 'custom'
    none = 'none'


class OauthCredentialsSource(Enum):
    integration = 'integration'
    connection = 'connection'


class OauthGrantType(Enum):
    authorization_code = 'authorization_code'
    client_credentials = 'client_credentials'
    password = 'password'


class OauthScope(BaseModel):
    default_apis: Optional[List[str]] = Field(
        None,
        description='List of Unified APIs that request this OAuth Scope by default. Application owners can customize the requested scopes.',
    )
    id: Optional[str] = Field(
        None, description='ID of the OAuth scope.', examples=['contacts:all']
    )
    label: Optional[str] = Field(
        None,
        description='Label of the OAuth scope.',
        examples=['Read/write on the Contacts resource'],
    )


class TlsSupport(BaseModel):
    description: Optional[str] = Field(
        None, description='Description of the TLS support'
    )
    type: Optional[str] = None


class OauthScope1(BaseModel):
    id: Optional[str] = Field(
        None, description='ID of the OAuth scope.', examples=['contacts:all']
    )
    label: Optional[str] = Field(
        None,
        description='Label of the OAuth scope.',
        examples=['Read/write on the Contacts resource'],
    )


class Audience(Enum):
    application_owner = 'application_owner'
    consumer = 'consumer'


class Format(Enum):
    markdown = 'markdown'


class EventSource(Enum):
    native = 'native'
    virtual = 'virtual'


class Type1(Enum):
    text = 'text'
    checkbox = 'checkbox'
    tel = 'tel'
    email = 'email'
    url = 'url'
    textarea = 'textarea'
    select = 'select'
    filtered_select = 'filtered-select'
    multi_select = 'multi-select'
    datetime = 'datetime'
    date = 'date'
    time = 'time'
    number = 'number'
    password = 'password'


class ConnectorSetting(BaseModel):
    id: Optional[str] = Field(None, examples=['pipeline_id'])
    label: Optional[str] = Field(None, examples=['Pipeline'])
    type: Optional[Type1] = Field(None, examples=['select'])


class ConnectorStatus(Enum):
    live = 'live'
    beta = 'beta'
    development = 'development'
    considering = 'considering'


class Id(RootModel[str]):
    root: str = Field(
        ...,
        description='A unique identifier for an object.',
        examples=['12345'],
        title='ID',
    )


class Links(BaseModel):
    current: Optional[str] = Field(
        None,
        description='Link to navigate to the current page through the API',
        examples=['https://unify.apideck.com/crm/companies'],
    )
    next: Optional[str] = Field(
        None,
        description='Link to navigate to the previous page through the API',
        examples=[
            'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM'
        ],
    )
    previous: Optional[str] = Field(
        None,
        description='Link to navigate to the previous page through the API',
        examples=[
            'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D'
        ],
    )


class Cursors(BaseModel):
    current: Optional[str] = Field(
        None,
        description='Cursor to navigate to the current page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjI='],
    )
    next: Optional[str] = Field(
        None,
        description='Cursor to navigate to the next page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjM='],
    )
    previous: Optional[str] = Field(
        None,
        description='Cursor to navigate to the previous page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjE='],
    )


class Meta(BaseModel):
    cursors: Optional[Cursors] = Field(
        None,
        description='Cursors to navigate to previous or next pages through the API',
    )
    items_on_page: Optional[int] = Field(
        None,
        description='Number of items returned in the data property of the response',
        examples=[50],
    )


class NotFoundResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Not Found'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unknown Widget'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#entitynotfounderror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[404]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['EntityNotFoundError']
    )


class Mode(Enum):
    native = 'native'
    virtual = 'virtual'


class PaginationCoverage(BaseModel):
    limit_support: Optional[bool] = Field(
        None,
        description='Indicates whether the connector supports changing the page size by using the limit parameter.',
    )
    mode: Optional[Mode] = Field(
        None,
        description='How pagination is implemented on this connector. Native mode means Apideck is using the pagination parameters of the connector. With virtual pagination, the connector does not support pagination, but Apideck emulates it.',
        examples=['native'],
    )
    paging_support: Optional[bool] = Field(
        None,
        description='Indicates whether the connector supports paging through results using the cursor parameter.',
    )


class PaymentRequiredResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=['You have reached your limit of 2000'],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Payment Required'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Request Limit Reached'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#requestlimiterror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[402]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['RequestLimitError']
    )


class ResourceId(RootModel[str]):
    root: str = Field(
        ...,
        description='ID of the resource, typically a lowercased version of name.',
        examples=['companies'],
    )


class ResourceStatus(Enum):
    live = 'live'
    beta = 'beta'
    development = 'development'
    upcoming = 'upcoming'
    considering = 'considering'


class Detail(BaseModel):
    context: Optional[str] = None
    error: Optional[Dict[str, Any]] = None


class TooManyRequestsResponse(BaseModel):
    detail: Optional[Detail] = None
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 6585)',
        examples=['Too Many Requests'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Connector Rate Limit Error'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#connectorratelimiterror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[429]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['ConnectorRateLimitError'],
    )


class UnauthorizedResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=[
            'Failed to generate valid JWT Session. Verify applicationId is correct'
        ],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Unauthorized'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unauthorized Request'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#unauthorizederror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[401]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['UnauthorizedError']
    )


class UnexpectedErrorResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Bad Request'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid Params'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#unauthorizederror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[400]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['RequestHeadersValidationError'],
    )


class UnifiedApiId(Enum):
    accounting = 'accounting'
    ats = 'ats'
    calendar = 'calendar'
    crm = 'crm'
    csp = 'csp'
    customer_support = 'customer-support'
    ecommerce = 'ecommerce'
    email = 'email'
    email_marketing = 'email-marketing'
    expense_management = 'expense-management'
    file_storage = 'file-storage'
    form = 'form'
    hris = 'hris'
    lead = 'lead'
    payroll = 'payroll'
    pos = 'pos'
    procurement = 'procurement'
    project_management = 'project-management'
    script = 'script'
    sms = 'sms'
    spreadsheet = 'spreadsheet'
    team_messaging = 'team-messaging'
    issue_tracking = 'issue-tracking'
    time_registration = 'time-registration'
    transactional_email = 'transactional-email'
    vault = 'vault'


class UnifiedProperty(RootModel[str]):
    root: str = Field(
        ...,
        description='Name of the property in our Unified API.',
        examples=['owner_id'],
    )


class ManagedVia(Enum):
    manual = 'manual'
    api = 'api'


class Mode1(Enum):
    native = 'native'
    virtual = 'virtual'
    none = 'none'


class SubscriptionLevel(Enum):
    connection = 'connection'
    integration = 'integration'


class Unit(Enum):
    second = 'second'
    minute = 'minute'
    hour = 'hour'
    day = 'day'


class RequestRate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    rate: int = Field(
        ..., description='The number of requests per window unit.', title='Rate'
    )
    size: int = Field(
        ..., description='Size of request window.', title='Size of rate window'
    )
    unit: Unit = Field(..., description='The window unit for the rate.', title='Unit')


class VirtualWebhooks(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    request_rate: RequestRate = Field(
        ...,
        description='The rate at which requests for resources will be made to downstream.',
        title='Request Rate',
    )
    resources: Optional[Dict[str, Any]] = Field(
        None,
        description='The resources that will be requested from downstream.',
        title='Resources',
    )


class WebhookSupport(BaseModel):
    managed_via: Optional[ManagedVia] = Field(
        None,
        description='How the subscription is managed in the downstream.',
        examples=['api'],
    )
    mode: Optional[Mode1] = Field(
        None, description='Mode of the webhook support.', examples=['native']
    )
    subscription_level: Optional[SubscriptionLevel] = Field(
        None,
        description='Received events are scoped to connection or across integration.',
        examples=['integration'],
    )
    virtual_webhooks: Optional[VirtualWebhooks] = Field(
        None,
        description='Virtual webhook config for the connector.',
        title='Virtual Webhooks',
    )


class Resource(BaseModel):
    excluded_from_coverage: Optional[bool] = Field(
        None, description='Exclude from mapping coverage', examples=[False]
    )
    id: Optional[str] = Field(
        None,
        description='ID of the resource, typically a lowercased version of its name.',
        examples=['companies'],
    )
    name: Optional[str] = Field(
        None, description='Name of the resource (plural)', examples=['Companies']
    )
    status: Optional[ResourceStatus] = None


class Api(BaseModel):
    api_reference_url: Optional[str] = Field(
        None,
        description='Link to the API reference of the API.',
        examples=['https://developers.apideck.com/apis/file-storage/reference'],
    )
    categories: Optional[List[str]] = Field(
        None,
        description='List of categories the API belongs to.',
        examples=[['files', 'file-storage', 'cloud-storage', 'object-storage']],
    )
    description: Optional[str] = Field(
        None,
        description='Description of the API.',
        examples=['Manage API keys, access tokens, OAuth flows and integrations.'],
    )
    events: Optional[List[str]] = Field(
        None,
        description='List of event types this API supports.',
        examples=[['crm.contact.updated', 'accounting.invoice.created']],
    )
    id: Optional[str] = Field(
        None, description='ID of the API.', examples=['file-storage']
    )
    name: Optional[str] = Field(
        None, description='Name of the API.', examples=['File Storage API']
    )
    postman_collection_id: Optional[str] = Field(
        None,
        description='ID of the Postman collection of the API.',
        examples=['1311564-00e7266b-a3d6-4f40-b172-baaa66a3ed6f'],
    )
    resources: Optional[List[Resource]] = Field(
        None, description='List of resources supported in this API.'
    )
    spec_url: Optional[str] = Field(
        None,
        description='Link to the latest OpenAPI specification of the API.',
        examples=['https://specs.apideck.com/file-storage.yml'],
    )
    status: Optional[ApiStatus] = None
    type: Optional[Type] = Field(
        None,
        description='Indicates whether the API is a Unified API. If unified_api is false, the API is a Platform API.',
    )


class LinkedResource(BaseModel):
    id: Optional[ResourceId] = None
    unified_property: Optional[UnifiedProperty] = None


class ApiResource(BaseModel):
    id: Optional[str] = Field(
        None,
        description='ID of the resource, typically a lowercased version of name.',
        examples=['companies'],
    )
    linked_resources: Optional[List[LinkedResource]] = Field(
        None, description='List of linked resources.'
    )
    name: Optional[str] = Field(
        None, description='Name of the resource (plural)', examples=['Companies']
    )
    schema_: Optional[Dict[str, Any]] = Field(
        None,
        alias='schema',
        description='JSON Schema of the resource in our Unified API',
        examples=[
            {
                'additionalProperties': False,
                'properties': {
                    'created_at': {
                        'example': '2020-09-30T07:43:32.000Z',
                        'readOnly': True,
                        'type': 'string',
                    },
                    'id': {'example': '12345', 'readOnly': True, 'type': 'string'},
                    'name': {'example': 'Elon Musk', 'minLength': 1, 'type': 'string'},
                    'updated_at': {
                        'example': '2020-09-30T07:43:32.000Z',
                        'readOnly': True,
                        'type': 'string',
                    },
                },
                'required': ['name', 'company_name'],
                'x-pii': ['name', 'email', 'first_name', 'last_name'],
            }
        ],
    )
    status: Optional[ResourceStatus] = None


class ConnectorDoc(BaseModel):
    audience: Optional[Audience] = Field(None, description='Audience for the doc.')
    format: Optional[Format] = Field(None, description='Format of the doc.')
    id: Optional[Id] = None
    name: Optional[str] = Field(
        None, description='Name of the doc.', examples=['connection']
    )
    url: Optional[AnyUrl] = Field(
        None,
        description='Link to fetch the content of the doc.',
        examples=[
            'https://unify.apideck.com/connector/connectors/workday/docs/consumer+connection'
        ],
    )


class ConnectorEvent(BaseModel):
    downstream_event_type: Optional[str] = Field(
        None, description='Downstream event type', examples=['person_created']
    )
    entity_type: Optional[str] = Field(
        None, description='Unify entity type', examples=['employee']
    )
    event_source: Optional[EventSource] = Field(
        None, description='Unify event source', examples=['native']
    )
    event_type: Optional[str] = Field(
        None, description='Unify event type', examples=['employee.created']
    )
    resources: Optional[List[ResourceId]] = None


class ConnectorsFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    status: Optional[ConnectorStatus] = None
    unified_api: Optional[UnifiedApiId] = None


class GetApiResourceResponse(BaseModel):
    data: ApiResource
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetApiResponse(BaseModel):
    data: Api
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetApisResponse(BaseModel):
    data: List[Api]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class LinkedConnectorResource(BaseModel):
    downstream_id: Optional[str] = Field(
        None,
        description="ID of the resource in the Connector's API (downstream)",
        examples=['accounts'],
    )
    downstream_name: Optional[str] = Field(
        None,
        description="Name of the resource in the Connector's API (downstream)",
        examples=['Accounts'],
    )
    id: Optional[ResourceId] = None
    name: Optional[str] = Field(
        None, description='Name of the resource (plural)', examples=['Companies']
    )
    status: Optional[ResourceStatus] = None


class UnifiedApi(BaseModel):
    downstream_unsupported_resources: Optional[List[ResourceId]] = Field(
        None, description='List of resources that are not supported on the downstream.'
    )
    id: Optional[UnifiedApiId] = None
    name: Optional[str] = Field(
        None, description='Name of the API.', examples=['File Storage API']
    )
    oauth_scopes: Optional[List[OauthScope1]] = None
    supported_events: Optional[List[ConnectorEvent]] = Field(
        None,
        description='List of events that are supported on the connector for this Unified API.',
    )
    supported_resources: Optional[List[LinkedConnectorResource]] = Field(
        None, description='List of resources that are supported on the connector.'
    )


class Connector(BaseModel):
    auth_only: Optional[bool] = Field(
        None,
        description='Indicates whether a connector only supports authentication. In this case the connector is not mapped to a Unified API, but can be used with the Proxy API',
        examples=[True],
    )
    auth_type: Optional[AuthType] = Field(
        None,
        description='Type of authorization used by the connector',
        examples=['oauth2'],
    )
    blind_mapped: Optional[bool] = Field(
        None,
        description='Set to `true` when connector was implemented from downstream docs only and without API access. This state indicates that integration will require Apideck support, and access to downstream API to validate mapping quality.',
        examples=[True],
    )
    configurable_resources: Optional[List[ResourceId]] = Field(
        None,
        description='List of resources that have settings that can be configured.',
        examples=[['leads', 'companies']],
    )
    custom_scopes: Optional[bool] = Field(
        None,
        description='Set to `true` when connector allows the definition of custom scopes.',
        examples=[True],
    )
    description: Optional[str] = Field(
        None,
        description='A description of the object.',
        examples=['A description'],
        title='Description',
    )
    docs: Optional[List[ConnectorDoc]] = None
    free_trial_available: Optional[bool] = Field(
        None,
        description='Set to `true` when the connector offers a free trial. Use `signup_url` to sign up for a free trial',
    )
    has_sandbox_credentials: Optional[bool] = Field(
        None,
        description='Indicates whether Apideck Sandbox OAuth credentials are available.',
        examples=[True],
    )
    icon_url: Optional[AnyUrl] = Field(
        None,
        description='Link to a small square icon for the connector.',
        examples=[
            'https://res.cloudinary.com/apideck/image/upload/v1529456047/catalog/salesforce/icon128x128.png'
        ],
    )
    id: Optional[str] = Field(
        None, description='ID of the connector.', examples=['crm+salesforce']
    )
    logo_url: Optional[AnyUrl] = Field(
        None,
        description='Link to the full logo for the connector.',
        examples=[
            'https://c1.sfdcstatic.com/content/dam/web/en_us/www/images/home/logo-salesforce-m.svg'
        ],
    )
    name: Optional[str] = Field(
        None, description='Name of the connector.', examples=['Salesforce']
    )
    oauth_credentials_source: Optional[OauthCredentialsSource] = Field(
        None,
        description='Location of the OAuth client credentials. For most connectors the OAuth client credentials are stored on integration and managed by the application owner. For others they are stored on connection and managed by the consumer in Vault.',
        examples=['integration'],
    )
    oauth_grant_type: Optional[OauthGrantType] = Field(
        None,
        description='OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types',
        examples=['authorization_code'],
    )
    oauth_scopes: Optional[List[OauthScope]] = Field(
        None, description='List of OAuth Scopes available for this connector.'
    )
    service_id: Optional[str] = Field(
        None, description='Service provider identifier', examples=['close']
    )
    settings: Optional[List[ConnectorSetting]] = None
    signup_url: Optional[AnyUrl] = Field(
        None,
        description="Link to the connector's signup page.",
        examples=['https://www.salesforce.com/signup'],
    )
    status: Optional[ConnectorStatus] = None
    supported_events: Optional[List[ConnectorEvent]] = Field(
        None,
        description='List of events that are supported on the connector across all Unified APIs.',
    )
    supported_resources: Optional[List[LinkedConnectorResource]] = Field(
        None, description='List of resources that are supported on the connector.'
    )
    tls_support: Optional[TlsSupport] = None
    unified_apis: Optional[List[UnifiedApi]] = Field(
        None, description='List of Unified APIs that feature this connector.'
    )
    webhook_support: Optional[WebhookSupport] = None
    website_url: Optional[AnyUrl] = Field(
        None,
        description="Link to the connector's website.",
        examples=['https://www.salesforce.com'],
    )


class GetConnectorResponse(BaseModel):
    data: Connector
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetConnectorsResponse(BaseModel):
    data: List[Connector]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class CoverageItem(BaseModel):
    downstream_id: Optional[str] = Field(
        None,
        description="ID of the resource in the Connector's API (downstream)",
        examples=['accounts'],
    )
    downstream_name: Optional[str] = Field(
        None,
        description="Name of the resource in the Connector's API (downstream)",
        examples=['Accounts'],
    )
    pagination: Optional[PaginationCoverage] = None
    pagination_supported: Optional[bool] = Field(
        None,
        description='Indicates if pagination (cursor and limit parameters) is supported on the list endpoint of the resource.',
    )
    supported_fields: Optional[List[SupportedProperty]] = Field(
        None, description='Supported fields on the detail endpoint.'
    )
    supported_filters: Optional[List[str]] = Field(
        None,
        description='Supported filters on the list endpoint of the resource.',
        examples=[['name', 'email']],
    )
    supported_list_fields: Optional[List[SupportedProperty]] = Field(
        None, description='Supported fields on the list endpoint.'
    )
    supported_operations: Optional[List[str]] = Field(
        None,
        description='List of supported operations on the resource.',
        examples=[['all', 'one', 'add', 'update', 'delete']],
    )
    supported_sort_by: Optional[List[str]] = Field(
        None,
        description='Supported sorting properties on the list endpoint of the resource.',
        examples=[['updated_at', 'created_at', 'name']],
    )


class ApiResourceCoverage(BaseModel):
    coverage: Optional[List[CoverageItem]] = None
    id: Optional[str] = Field(
        None,
        description='ID of the resource, typically a lowercased version of name.',
        examples=['companies'],
    )
    name: Optional[str] = Field(
        None, description='Name of the resource (plural)', examples=['Companies']
    )
    status: Optional[ResourceStatus] = None


class ConnectorResource(BaseModel):
    custom_fields_supported: Optional[bool] = Field(
        None, description='Indicates if custom fields are supported on this resource.'
    )
    downstream_id: Optional[str] = Field(
        None,
        description="ID of the resource in the Connector's API (downstream)",
        examples=['accounts'],
    )
    downstream_name: Optional[str] = Field(
        None,
        description="Name of the resource in the Connector's API (downstream)",
        examples=['Accounts'],
    )
    downstream_unsupported_operations: Optional[List[str]] = Field(
        None,
        description='List of operations that are not supported on the downstream.',
        examples=[['upload']],
    )
    id: Optional[ResourceId] = None
    name: Optional[str] = Field(
        None, description='Name of the resource (plural)', examples=['Companies']
    )
    pagination: Optional[PaginationCoverage] = None
    pagination_supported: Optional[bool] = Field(
        None,
        description='Indicates if pagination (cursor and limit parameters) is supported on the list endpoint of the resource.',
    )
    status: Optional[ResourceStatus] = None
    supported_fields: Optional[List[SupportedProperty]] = Field(
        None, description='Supported fields on the detail endpoint.'
    )
    supported_filters: Optional[List[str]] = Field(
        None,
        description='Supported filters on the list endpoint of the resource.',
        examples=[['name', 'email']],
    )
    supported_list_fields: Optional[List[SupportedProperty]] = Field(
        None, description='Supported fields on the list endpoint.'
    )
    supported_operations: Optional[List[str]] = Field(
        None,
        description='List of supported operations on the resource.',
        examples=[['all', 'one', 'add', 'update', 'delete']],
    )
    supported_sort_by: Optional[List[str]] = Field(
        None,
        description='Supported sorting properties on the list endpoint of the resource.',
        examples=[['updated_at', 'created_at', 'name']],
    )


class GetApiResourceCoverageResponse(BaseModel):
    data: ApiResourceCoverage
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetConnectorResourceResponse(BaseModel):
    data: ConnectorResource
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class ChildProperty(BaseModel):
    unified_property: Optional[SupportedProperty] = None


class SupportedProperty(BaseModel):
    child_properties: Optional[List[ChildProperty]] = Field(
        None, description='List of child properties of the unified property.'
    )
    unified_property: Optional[UnifiedProperty] = None


CoverageItem.model_rebuild()
ConnectorResource.model_rebuild()
ChildProperty.model_rebuild()
